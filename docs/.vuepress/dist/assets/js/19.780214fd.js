(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{595:function(t,e,r){"use strict";r.r(e);var a=r(58),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"lucid-基础概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lucid-基础概念"}},[t._v("#")]),t._v(" Lucid 基础概念")]),t._v(" "),r("p",[t._v("在 Lucid 中，有三个核心抽象概念，分别是："),r("code",[t._v("event")]),t._v("（事件）、"),r("code",[t._v("handlers")]),t._v("（处理器）和"),r("code",[t._v("arrays")]),t._v("（数组）。为了了解应该如何使用这些核心组件，Lucid 提供了 "),r("code",[t._v("histogram.dpt")]),t._v(" （一个简单的测量程序）实例程序供使用者学习。程序的可视化结构如下：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://imunetgroup.oss-cn-huhehaote.aliyuncs.com/gaotianyu/image-20210926102953814.png",alt:"image-20210926102953814"}})]),t._v(" "),r("h3",{attrs:{id:"事件和处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件和处理器"}},[t._v("#")]),t._v(" 事件和处理器")]),t._v(" "),r("h4",{attrs:{id:"事件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),r("p",[t._v("事件是 Lucid 通信的基础，是系统正在处理的数据包的抽象表示，也是系统中组件之间的控制信息。每个事件都有一个名字，并且携带用户指定的数据作为参数。")]),t._v(" "),r("p",[t._v("例如，在 "),r("code",[t._v("histogram.dpt")]),t._v(" 中，存在一个名为 "),r("code",[t._v("ip_in")]),t._v(" 的事件。该事件是一个数据包的抽象表达，参数为输入端口、源地址、目的地址、数据包长度和 tos 字节。声明如下：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);\n")])])]),r("p",[t._v("当数据包到达交换机时，由底层交换机生成该事件。")]),t._v(" "),r("h4",{attrs:{id:"处理器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#处理器"}},[t._v("#")]),t._v(" 处理器")]),t._v(" "),r("p",[t._v("处理器是 Lucid 中主要的计算组件。处理器是一个命令式的函数，当某个事件发生时执行。处理程序可以操作本地变量，本地变量只在事件的存活时间中存在，也可以操作全局变量，全局变量在数据包中持续存在。处理器也可以创建新的事件，以便后续使用。")]),t._v(" "),r("p",[t._v("下面是 "),r("code",[t._v("histogram.dpt")]),t._v(" 中的 "),r("code",[t._v("ip_in")]),t._v(" 处理器：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("handle ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos) {\n  int idx = 0;\n  if (len <= 128) { \n    idx = 0;\n  } else {\n    if (len <= 512) {\n      idx = 1;\n    } else {\n      if (len <= 1024){ \n        idx = 2;\n      } else {\n        idx = 3;\n      }\n    }\n  }\n  Array.setm(hist_arr, idx, incr, 1);\n  int total_ct = Array.update(total_arr, 0, incr, 1, incr, 1);\n  if (total_ct == pktct_interval) {\n    generate report(0);\n  }\n  generate ip_out(igr_port, src, dst);\n}\n")])])]),r("p",[t._v("在 "),r("code",[t._v("ip_in")]),t._v(" 处理器中，我们使用 "),r("code",[t._v("Array")]),t._v(" 更新了 "),r("code",[t._v("histogram")]),t._v(" 的持久状态，创建了一个新的事件 "),r("code",[t._v("ip_out")]),t._v("，该事件可以将数据包下发至交换机，指定了数据包的发送端口。")]),t._v(" "),r("p",[t._v("此外，处理器还声明了一个新的事件"),r("code",[t._v("report")]),t._v(" ，该事件将 "),r("code",[t._v("histogram")]),t._v(" 状态导出到收集信息的服务器。下面是 "),r("code",[t._v("report")]),t._v(" 处理器的实现：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("handle report(int idx){\n    int cur_idx = idx; \n    int column_ct = Array.update(hist_arr, cur_idx, getf, 0, setf, 0);\n    generate ip_out(collector_port, cur_idx, column_ct);                \n    if (cur_idx == 0) {\n      Array.set(total_arr, 0, 0);      \n    }\n    if (cur_idx < 3){       \n      generate report(cur_idx + 1);\n    }\n}\n")])])]),r("h4",{attrs:{id:"继续和递归"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#继续和递归"}},[t._v("#")]),t._v(" 继续和递归")]),t._v(" "),r("p",[t._v("当一个处理器生成一个事件时，该事件被编码为一个数据包，重新循环，并在随后通过交换机的管道进行处理。我们可以把生成事件"),r("code",[t._v("bar")]),t._v(" 的处理器 "),r("code",[t._v("foo")]),t._v(" 看作一个名为 "),r("code",[t._v("foo")]),t._v(" 的函数，它调用了一个延续函数 "),r("code",[t._v("bar")]),t._v(" 在未来的某个时间执行。")]),t._v(" "),r("p",[t._v("在 Lucid 中，处理器通过生成事件来表达那些过于复杂而无法在交换机通道中一次完成的计算。")]),t._v(" "),r("p",[t._v("处理器也可以是递归的，可以调用处理器本身。")]),t._v(" "),r("p",[t._v("在 "),r("code",[t._v("report")]),t._v(" 处理器中，接收 "),r("code",[t._v("idx")]),t._v(" 进行处理，而后递归地调用本身处理 "),r("code",[t._v("idx+1")]),t._v("。每个事件都在交换机的管道中被单独处理，递归继续进行，直到 "),r("code",[t._v("hist_arr")]),t._v(" 中的全部元素都被处理完毕。")]),t._v(" "),r("p",[t._v("当然，递归也是有代价的，每次递归都会导致一个数据包被重新循环，造成时延。但这类时延无法避免：在底层硬件中，每个数据包只能访问每个持久性的内存阵列中的一个元素。")]),t._v(" "),r("h4",{attrs:{id:"进入和退出事件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进入和退出事件"}},[t._v("#")]),t._v(" 进入和退出事件")]),t._v(" "),r("p",[r("code",[t._v("entry event")]),t._v(" 和 "),r("code",[t._v("exit event")]),t._v(" 可以将可编程交换机的数据包转入 Lucid 程序或转出 Lucid 程序。例如，在 "),r("code",[t._v("histogram.dpt")]),t._v(" 中有如下两个事件：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("entry event ip_in (int<<9>> igr_port, int src, int dst, int<<16>> len, int<<8>> tos);\nevent report(int idx);\nexit event ip_out (int<<9>> egr_port, int src, int dst);\n")])])]),r("p",[r("code",[t._v("evene")]),t._v(" ：常规事件，由 Lucid 创建，并由 Lucid 处理。")]),t._v(" "),r("p",[r("code",[t._v("entry event")]),t._v("：进入事件，由可编程交换机创建，交由 Lucid 进行处理。")]),t._v(" "),r("p",[r("code",[t._v("exit event")]),t._v("： 退出事件，相反地，由 Lucid 创建，交由可编程交换机处理。")]),t._v(" "),r("h3",{attrs:{id:"arrays-数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arrays-数组"}},[t._v("#")]),t._v(" Arrays 数组")]),t._v(" "),r("p",[t._v("Lucid 程序通过 "),r("code",[t._v("Arrays")]),t._v(" 模块与持久化状态进行交互。在 "),r("code",[t._v("histogram.dpt")]),t._v(" 中，我们可以看到一些对 "),r("code",[t._v("Array")]),t._v(" 的操作：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Array.set(hist_arr, idx, incr, 1);\nint total_ct = Array.update(total_arr, 0, incr, 1, incr, 1);\n")])])]),r("p",[t._v("一般来说，"),r("code",[t._v("Array")]),t._v(" 方法可以从持久化的数组中的特定单元读取一个值，进行少量的计算，然后将结果返回给内存单元或者局部变量。")]),t._v(" "),r("h4",{attrs:{id:"array-ordering"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array-ordering"}},[t._v("#")]),t._v(" Array ordering")]),t._v(" "),r("p",[t._v("Lucid 的类型检查器执行两个与数组相关的检查操作，旨在捕获底层硬件无法支持的内存访问模式的程序。具体地说，Lucid 的类型系统要求你在有状态的操作上遵守如下两条规则：")]),t._v(" "),r("ol",[r("li",[t._v("始终按照声明的顺序访问 "),r("code",[t._v("Array")])]),t._v(" "),r("li",[t._v("在程序的每个控制流中只访问 "),r("code",[t._v("Array")]),t._v(" 一次")])]),t._v(" "),r("p",[t._v("如果你在编写程序时，违反了以上两条规则，那么你将收到 Lucid “温馨”的错误提示。")]),t._v(" "),r("h4",{attrs:{id:"memops"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#memops"}},[t._v("#")]),t._v(" "),r("strong",[t._v("Memops")])]),t._v(" "),r("p",[t._v("当你调用 "),r("code",[t._v("Array")]),t._v(" 的方法时，通常需要传递一个 "),r("code",[t._v("memops")]),t._v(" 函数。这个函数描述了从持久化内存中读取状态的计算，然后将结果返回给它所读取的内存单元，或者程序中的一个局部变量。")]),t._v(" "),r("p",[t._v("例如 "),r("code",[t._v("Array.setm(hist_arr, idx, incr, 1)")]),t._v(" 等价为 "),r("code",[t._v("hist_arr[idx] = incr(hist_arr[idx], 1)")]),t._v("。")]),t._v(" "),r("p",[r("code",[t._v("incr")]),t._v(" 进行如下定义：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("memop incr(int memval, int incrval) {\n    return memval + incrval;\n}\n")])])]),r("p",[t._v("类比 C 语言，我们声明了一个 "),r("code",[t._v("memop")]),t._v(" 类型的函数，名为 "),r("code",[t._v("incr")]),t._v("，接受两个参数，并返回一个结果。")]),t._v(" "),r("p",[t._v("Lucid 对 "),r("code",[t._v("Memops")]),t._v(" 有如下限制：")]),t._v(" "),r("ol",[r("li",[t._v("一个 "),r("code",[t._v("memop")]),t._v(" 只能有两个参数")]),t._v(" "),r("li",[t._v("一个 "),r("code",[t._v("memop")]),t._v(" 有且只能有一个返回值")]),t._v(" "),r("li",[t._v("一个 "),r("code",[t._v("memop")]),t._v(" 只能使用每个参数一次")])]),t._v(" "),r("blockquote",[r("p",[t._v("A note on memop restrictions: If you are familiar with the Tofino, you might observe that these rules are more limiting than the underlying hardware. However, they present a simpler and more regular interface to state that simplifies a developer's mental model. In the future, our goal is for Lucid's memop syntax to be extendible, so that developers can choose their own balance between regularity and completeness.")])]),t._v(" "),r("h4",{attrs:{id:"array-update"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array-update"}},[t._v("#")]),t._v(" Array.update")]),t._v(" "),r("p",[t._v("Array 最强大的方法是 "),r("code",[t._v("update")]),t._v(" 函数，"),r("code",[t._v("update")]),t._v(" 允许用户并行地执行读写操作，例如：")]),t._v(" "),r("div",{staticClass:"language-lucid extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("int total_ct = Array.update(total_arr, 0, incr, 1, incr, 1);\n")])])]),r("p",[t._v("使用一个语句完成了 "),r("code",[t._v("total_arr[0] + 1 + 1")]),t._v(" 的操作，在 C 语言中，我们一般会使用如下代码完成该功能：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("int tmp = incr(total_arr[0], 1); \ntotal_arr[0] = incr(total_arr[0], 1); \ntotal_ct = tmp;\n")])])]),r("p",[t._v("同样，由于对 "),r("code",[t._v("memops")]),t._v(" 的语法限制，Lucid 可以保证任何 "),r("code",[t._v("Array.update")]),t._v(" 的调用可以被编译为底层硬件的合法指令。")])])}),[],!1,null,null,null);e.default=_.exports}}]);